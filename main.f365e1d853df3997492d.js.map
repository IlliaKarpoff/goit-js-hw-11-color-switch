{"version":3,"sources":["webpack:///./js/task-2.js","webpack:///./js/task-3.js","webpack:///./js/task-1.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","loggerr","updatedUsers","table","makeTransaction","transaction","min","max","id","Math","floor","random","reject","logSuccess","logError","warn","amount","catch","ref","days","document","querySelector","hours","mins","secs","targetDate","Date","pad","value","String","padStart","setInterval","delta","now","textContent","colors","bodyRef","btnStartRef","btnStopRef","intervalId","changeColor","style","backgroundColor","length","startChanges","removeEventListener","addEventListener","clearInterval"],"mappings":"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","file":"main.f365e1d853df3997492d.js","sourcesContent":["// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. \r\n// Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\n// const { resolve } = require(\"core-js/fn/promise\");\r\n\r\n// const { all } = require(\"core-js/fn/promise\");\r\n\r\n// const { resolve } = require(\"core-js/fn/promise\");\r\n\r\nconst delay = ms => {\r\n  const promise = new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms);  \r\n    }, ms);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time} ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n\r\n// Задание 2\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \r\n// а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\n// const users = [\r\n//   { name: 'Mango', active: true },\r\n//   { name: 'Poly', active: false },\r\n//   { name: 'Ajax', active: true },\r\n//   { name: 'Lux', active: false },\r\n// ];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n//   callback(updatedUsers);\r\n// };\r\n\r\n// const loggerr = updatedUsers => console.table(updatedUsers);\r\n\r\n// // /* Сейчас работает так\r\n// toggleUserState(users, 'Mango', loggerr);\r\n// toggleUserState(users, 'Lux', loggerr);\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const promise = new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n  return promise;\r\n};\r\nconst loggerr = updatedUsers => console.table(updatedUsers);\r\n// /* Должно работать так\r\ntoggleUserState(users, 'Mango').then(loggerr);\r\ntoggleUserState(users, 'Lux').then(loggerr);\r\n\r\n\r\n\r\n// Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n// // Работает так\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\nconst makeTransaction = transaction => {\r\n  const id = transaction.id;\r\n  const time = randomIntegerFromInterval(200, 500);\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      canProcess ? resolve({id, time}) : reject(id);\r\n    }, time);\r\n  });\r\n};\r\nconst logSuccess = ({id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time} ms`);\r\n};\r\nconst logError = (id) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n//  Должно работать так\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);","const ref = {\r\n    days : document.querySelector('span[data-value=\"days\"]'),\r\n    hours: document.querySelector('span[data-value=\"hours\"]'),\r\n    mins : document.querySelector('span[data-value=\"mins\"]'),\r\n    secs : document.querySelector('span[data-value=\"secs\"]'),\r\n}\r\nconst targetDate = new Date('Jan 01, 2021');\r\n\r\nconst pad = (value) => {\r\n    return String(value).padStart(2, '0');\r\n}\r\n// const updateClockFace = (time) => {\r\n//     const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n//     const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n//     const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n//     const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n//     ref.days.textContent = days;\r\n//     ref.hours.textContent = hours;\r\n//     ref.mins.textContent = mins;\r\n//     ref.secs.textContent = secs;\r\n// }\r\n// const clockBack = () => {\r\n//   const delta = targetDate - Date.now();\r\n//   updateClockFace(delta);\r\n// }\r\n\r\nconst clockBack = () => {\r\n    const delta = targetDate - Date.now();\r\n    ref.days.textContent = Math.floor(delta / (1000 * 60 * 60 * 24));\r\n    ref.hours.textContent = pad(Math.floor((delta % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    ref.mins.textContent = pad(Math.floor((delta % (1000 * 60 * 60)) / (1000 * 60)));\r\n    ref.secs.textContent = pad(Math.floor((delta % (1000 * 60)) / (1000)));\r\n}\r\nsetInterval(clockBack, 1000)","const colors = [\r\n    '#FFFFFF',\r\n    '#2196F3',\r\n    '#4CAF50',\r\n    '#FF9800',\r\n    '#009688',\r\n    '#795548',\r\n];\r\n//   ⚠️ \r\nconst bodyRef = document.querySelector('body');\r\nconst btnStartRef = document.querySelector('button[data-action=\"start\"]');\r\nconst btnStopRef = document.querySelector('button[data-action=\"stop\"]');\r\nlet intervalId = null;\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\nconst changeColor = () => {\r\n  bodyRef.style.backgroundColor = colors[randomIntegerFromInterval(0, colors.length)];\r\n}\r\nconst startChanges = () => {\r\n  intervalId = setInterval(changeColor, 1000);\r\n  btnStartRef.removeEventListener('click', startChanges);\r\n}\r\nconst stopChanges = () => {\r\n  clearInterval(intervalId);\r\n  btnStartRef.addEventListener('click', startChanges);\r\n}\r\nbtnStartRef.addEventListener('click', startChanges);\r\nbtnStopRef.addEventListener('click', stopChanges);"],"sourceRoot":""}